<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software House Based on Jakarta on overpower.</title>
    <link>https://overpower.id/</link>
    <description>Recent content in Software House Based on Jakarta on overpower.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Sep 2021 11:21:58 +0700</lastBuildDate><atom:link href="https://overpower.id/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Always Encode / Decode Query String in URL</title>
      <link>https://overpower.id/posts/always-encode/</link>
      <pubDate>Tue, 28 Sep 2021 11:21:58 +0700</pubDate>
      
      <guid>https://overpower.id/posts/always-encode/</guid>
      <description>Preface Query strings can be very handy in web development, for example query string is very useful for adding wild card variable that we can use in our sites. For example tracking UTM (Urchin Tracking Module) Parameter (www.example.com?utm_source=Facebook) or we can passing any wildcard variable that needed for our application to produce something (www.example.com/pages?page=5). But in order for us to take this benefit of query strings, we have to be careful on how we used it, what i mean by &amp;ldquo;be careful&amp;rdquo; is, as stated here URL DOCS we cannot put some symbol on the query string, for example we cant put &amp;lsquo;&#39;, &amp;lsquo;/&amp;rsquo;, &amp;lsquo;+&amp;rsquo; and spaces &#39; &amp;lsquo;.</description>
    </item>
    
    <item>
      <title>Pre render your React App</title>
      <link>https://overpower.id/posts/react-snap/</link>
      <pubDate>Sun, 26 Sep 2021 16:19:15 +0700</pubDate>
      
      <guid>https://overpower.id/posts/react-snap/</guid>
      <description>Pre-renders a web app into static HTML. Uses Headless Chrome to crawl all available links starting from the root. Heavily inspired by prep and react-snapshot, but written from scratch. Uses best practices to get the best loading performance. you can grab it here</description>
    </item>
    
  </channel>
</rss>
